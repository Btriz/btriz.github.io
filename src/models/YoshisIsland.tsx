/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Kuhleb (https://sketchfab.com/Kuhleb)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/yoshis-island-a81ac426d62f471ab178963781bfaacb
Title: Yoshi's island
*/

import type { GLTF } from 'three-stdlib';

import * as THREE from 'three';
import { useCallback, useEffect, useRef } from 'react';
import { useGLTF } from '@react-three/drei';

import yoshisIslandScene from '../assets/3d/yoshis_island.glb';
import { a } from '@react-spring/three';
import type { JSX } from 'react/jsx-runtime';
import { useFrame, useThree } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
    Object_3: THREE.Mesh
    Object_4: THREE.Mesh
    Object_5: THREE.Mesh
    Object_6: THREE.Mesh
    Object_7: THREE.Mesh
    Object_8: THREE.Mesh
    Object_9: THREE.Mesh
    Object_10: THREE.Mesh
    Object_11: THREE.Mesh
    Object_12: THREE.Mesh
    Object_13: THREE.Mesh
    Object_14: THREE.Mesh
    Object_15: THREE.Mesh
    Object_16: THREE.Mesh
    Object_17: THREE.Mesh
  }
  materials: {
    color_14211288: THREE.MeshStandardMaterial
    color_15247472: THREE.MeshStandardMaterial
    color_1593488: THREE.MeshStandardMaterial
    color_1599656: THREE.MeshStandardMaterial
    color_1609936: THREE.MeshStandardMaterial
    color_1624288: THREE.MeshStandardMaterial
    color_16277600: THREE.MeshStandardMaterial
    color_16308408: THREE.MeshStandardMaterial
    color_16312496: THREE.MeshStandardMaterial
    color_16316664: THREE.MeshStandardMaterial
    color_2658448: THREE.MeshStandardMaterial
    color_3186688: THREE.MeshStandardMaterial
    color_34840: THREE.MeshStandardMaterial
    color_5298392: THREE.MeshStandardMaterial
    color_7928056: THREE.MeshStandardMaterial
    color_8968192: THREE.MeshStandardMaterial
  }
}
type YoshisIslandProps = JSX.IntrinsicElements['group'] & {
  isRotating: boolean;
  setIsRotating: (_isRotating: boolean) => void;
  setCurrentStage: (_stage: number | null) => void;
};

export function YoshisIsland({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...groupProps
}: YoshisIslandProps) {
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(yoshisIslandScene) as unknown as GLTFResult;
  const yoshisIslandRef = useRef<THREE.Group>(null);
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = useCallback(
    (event: PointerEvent | TouchEvent) => {
      event.stopPropagation();
      event.preventDefault();
      setIsRotating(true);

      const clientX =
          'touches' in event && event.touches.length
            ? event.touches[0].clientX
            : (event as PointerEvent).clientX;

      lastX.current = clientX;
    },
    [setIsRotating],
  );

  const handlePointerUp = useCallback(
    (event: PointerEvent) => {
      event.stopPropagation();
      event.preventDefault();
      setIsRotating(false);
    },
    [setIsRotating],
  );

  const handlePointerMove = useCallback(
    (event: PointerEvent | TouchEvent) => {
      event.stopPropagation();
      event.preventDefault();
      if (isRotating) {
        const clientX =
            'touches' in event && event.touches.length
              ? event.touches[0].clientX
              : (event as PointerEvent).clientX;

        const delta = (clientX - lastX.current) / viewport.width;
        if (yoshisIslandRef.current) {
          yoshisIslandRef.current.rotation.y += delta * 0.01 * Math.PI;
        }
        lastX.current = clientX;
        rotationSpeed.current = delta * 0.01;
      }
    },
    [isRotating, viewport.width],
  );

  useFrame(() => {
    if (!isRotating && yoshisIslandRef.current) {
      rotationSpeed.current *= dampingFactor;
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      yoshisIslandRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = yoshisIslandRef.current?.rotation.y ?? 0;

      const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      switch (true) {
      case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
        setCurrentStage(4);
        break;
      case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
        setCurrentStage(3);
        break;
      case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
        setCurrentStage(2);
        break;
      case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        setCurrentStage(1);
        break;
      default:
        setCurrentStage(null);
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    // document.addEventListener('keydown', handleKeyDown);
    // document.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      // document.removeEventListener('keydown', handleKeyDown);
      // document.removeEventListener('keyup', handleKeyUp);
    };
  }, [
    gl,
    handlePointerDown,
    handlePointerUp,
    handlePointerMove,
    // handleKeyDown,
    // handleKeyUp,
  ]);

  return (
    <a.group ref={yoshisIslandRef} {...groupProps} dispose={null}>
      <a.group rotation={[-Math.PI, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials.color_14211288}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials.color_15247472}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.color_1593488}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.color_1599656}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.color_1609936}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials.color_1624288}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials.color_16277600}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9.geometry}
          material={materials.color_16308408}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_10.geometry}
          material={materials.color_16312496}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_11.geometry}
          material={materials.color_16316664}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_12.geometry}
          material={materials.color_2658448}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_13.geometry}
          material={materials.color_3186688}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_14.geometry}
          material={materials.color_34840}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_15.geometry}
          material={materials.color_5298392}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_16.geometry}
          material={materials.color_7928056}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_17.geometry}
          material={materials.color_8968192}
        />
      </a.group>
    </a.group>
  );
}

export default YoshisIsland;
